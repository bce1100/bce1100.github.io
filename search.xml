<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[TCP握手和挥手]]></title>
    <url>%2F2019%2F02%2F28%2FCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%2F</url>
    <content type="text"><![CDATA[TCP三次握手在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。TCP三次握手大概流程： 第一次握手：建立连接时，客户端发送SYN包（syn = j）到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到SYN包，必须确认客户端的SYN（ack = j+1），同时自己也发送一个SYN包（syn = k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的ACK+SYN包，向服务器发送确认包ACK（ack = k+1），此包发送完毕，客户端和服务器都进入ESTABLISHED状态，完成三次握手。 为什么要三次握手才能建立连接​ 主要是为了初始化Sequence Number的初始值。通信的双方要互相通知对方自己初始化的Sequence Number，作为以后数据通信的序号，以保证应用层接收的数据不会因为网络上的传输问题而乱序。即TCP会用这个序号来拼接数据。因此在服务器回发他的Sequence Number即第二次握手之后，客户端还需要发送确认报文给服务器，告诉服务器客户端已经收到你初始化的Sequence Number了。 TCP四次挥手TCP采用四次挥手来释放连接（客户端或服务器都可以提出终止连接的请求，以下假定为客户端发送） 第一次挥手：客户端发送一个FIN，用来关闭客户端到服务器的数据传送，客户端进入FIN_WAIT_1状态； 第二次挥手：服务器收到FIN后，发送一个ACK给客户端，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），服务器进入CLOSE_WAIT状态； 第三次挥手：服务器发送一个FIN，用来关闭服务器到客户端的数据传送，服务器进入LAST_ACK状态； 第四次挥手：客户端收到FIN后，客户端进入TIME_WAIT状态，接着发送一个ACK给服务器，确认序号为收到序号+1，服务器进入CLOSED状态，完成四次挥手。 为什么会有TIME_WAIT状态 确保有足够的时间让对方收到ACK包 避免新旧连接混淆 为什么需要四次握手才能断开连接因为全双工，发送方和接收方都需要FIN报文和ACK报文]]></content>
      <tags>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssm整合配置文件参考]]></title>
    <url>%2F2019%2F02%2F28%2Fm%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%82%E8%80%83%2F</url>
    <content type="text"><![CDATA[web.xml:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153&lt;?xml version="1.0" encoding="UTF-8"?&gt;-&lt;web-app version="2.5" id="WebApp_ID" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;-&lt;welcome-file-list&gt;&lt;welcome-file&gt;login.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;&lt;!-- 1启动spring容器 --&gt;&lt;!-- needed for ContextLoaderListener --&gt;-&lt;context-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;-&lt;listener&gt;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!-- 2 springmvc的前端控制器，拦截所有请求 --&gt;&lt;!-- The front controller of this Spring Web application, responsible forhandling all application requests --&gt;-&lt;servlet&gt;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;-&lt;servlet-mapping&gt;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!-- 3字符编码过滤器 必须放在所有过滤器之前 --&gt;-&lt;filter&gt;&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;-&lt;init-param&gt;&lt;param-name&gt;encoding&lt;/param-name&gt;&lt;param-value&gt;UTF-8&lt;/param-value&gt;&lt;/init-param&gt;-&lt;init-param&gt;&lt;param-name&gt;forceRequestEncoding&lt;/param-name&gt;&lt;param-value&gt;true&lt;/param-value&gt;&lt;/init-param&gt;-&lt;init-param&gt;&lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;&lt;param-value&gt;true&lt;/param-value&gt;&lt;/init-param&gt;&lt;/filter&gt;-&lt;filter-mapping&gt;&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- 4rest风格 将页面普通的 post请求转为指定的delete或put请求 --&gt;-&lt;filter&gt;&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;&lt;/filter&gt;-&lt;filter-mapping&gt;&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;-&lt;filter&gt;&lt;filter-name&gt;HttpPutFormContentFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.HttpPutFormContentFilter&lt;/filter-class&gt;&lt;/filter&gt;-&lt;filter-mapping&gt;&lt;filter-name&gt;HttpPutFormContentFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;/web-app&gt; applicationContext.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143&lt;?xml version="1.0" encoding="UTF-8"?&gt;-&lt;beans xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"&gt;-&lt;context:component-scan base-package="com.ljj"&gt;&lt;context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/&gt;&lt;/context:component-scan&gt;&lt;!-- Spring配置文件 主要配置和业务逻辑有关的 --&gt;&lt;!-- ==================数据源 事务控制……============= --&gt;&lt;context:property-placeholder location="classpath:dbconfig.properties"/&gt;-&lt;bean class="com.mchange.v2.c3p0.ComboPooledDataSource" id="pooledDataSource"&gt;&lt;property value="$&#123;jdbc.jdbcUrl&#125;" name="jdbcUrl"/&gt;&lt;property value="$&#123;jdbc.jdbcDriver&#125;" name="driverClass"/&gt;&lt;property value="$&#123;jdbc.user&#125;" name="user"/&gt;&lt;property value="$&#123;jdbc.password&#125;" name="password"/&gt;&lt;/bean&gt;&lt;!-- ============================================ --&gt;&lt;!-- =========配置和mybatis的整合 ===============--&gt;-&lt;bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory"&gt;&lt;!-- 制定mybatis全局配置文件的位置 --&gt;&lt;property value="classpath:mybatis-config.xml" name="configLocation"/&gt;&lt;property name="dataSource" ref="pooledDataSource"/&gt;&lt;!-- 制定mybatis，mapper文件位置 --&gt;&lt;property value="classpath:mapper/*xml" name="mapperLocations"/&gt;&lt;/bean&gt;&lt;!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 --&gt;-&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;&lt;!-- 扫描所有dao接口的实现，加入到ioc容器中 --&gt;&lt;property value="com.ljj.dao" name="basePackage"/&gt;&lt;property value="sqlSessionFactory" name="sqlSessionFactoryBeanName"/&gt;&lt;/bean&gt;&lt;!-- 配置一个可以批量生成的sqlsession --&gt;-&lt;bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession"&gt;&lt;constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/&gt;&lt;constructor-arg value="BATCH" name="executorType"/&gt;&lt;/bean&gt;&lt;!-- ============================================ --&gt;&lt;!-- ===========事务控制的配置==================== --&gt;-&lt;bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager"&gt;&lt;!-- 控制住数据源 --&gt;&lt;property name="dataSource" ref="pooledDataSource"/&gt;&lt;/bean&gt;&lt;!-- 开启基于注解的事务，使用xml配置形式的事务 --&gt;-&lt;aop:config&gt;&lt;!-- 切入点表达式 --&gt;&lt;aop:pointcut expression="execution(* com.ljj.service..*(..))" id="txPoint"/&gt;&lt;!-- 配置事务增强 --&gt;&lt;aop:advisor pointcut-ref="txPoint" advice-ref="txAdvice"/&gt;&lt;/aop:config&gt;&lt;!-- 配置事务增强，即事务如何切入 --&gt;-&lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;-&lt;tx:attributes&gt;&lt;!-- 所有方法都是事务方法 --&gt;&lt;tx:method name="*"/&gt;&lt;!-- 以get开始的所有方法 --&gt;&lt;tx:method name="get*" read-only="true"/&gt;&lt;/tx:attributes&gt;&lt;/tx:advice&gt;&lt;!-- Spring配置文件的核心点（数据源，与mybatis的整合，事务控制） --&gt;&lt;/beans&gt; dispatcherServlet-servlet.xml12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version="1.0" encoding="UTF-8"?&gt;-&lt;beans xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"&gt;&lt;!-- springmvc的配置文件 包含网站跳转逻辑，配置 --&gt;-&lt;context:component-scan use-default-filters="false" base-package="com.ljj"&gt;&lt;!-- 只扫描控制器 --&gt;&lt;context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/&gt;&lt;/context:component-scan&gt;&lt;!-- 配置视图解析器，方便页面返回 --&gt;-&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;&lt;property value="/WEB-INF/views/" name="prefix"/&gt;&lt;property value=".jsp" name="suffix"/&gt;&lt;/bean&gt;&lt;!-- 两个标准配置 --&gt;&lt;!-- 将springmvc不能处理的请求交给tomcat --&gt;&lt;mvc:default-servlet-handler/&gt;&lt;!-- 能支持springmvc更高级的一些功能，JSR003校验…… 映射动态请求 --&gt;&lt;mvc:annotation-driven/&gt;&lt;/beans&gt; mybatis-config.xml123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration SYSTEM "http://mybatis.org/dtd/mybatis-3-config.dtd" PUBLIC "-//mybatis.org//DTD Config 3.0//EN"&gt;-&lt;configuration&gt;-&lt;settings&gt;&lt;setting value="true" name="mapUnderscoreToCamelCase"/&gt;&lt;/settings&gt;-&lt;typeAliases&gt;&lt;package name="com.ljj.bean"/&gt;&lt;/typeAliases&gt;-&lt;plugins&gt;-&lt;plugin interceptor="com.github.pagehelper.PageInterceptor"&gt;&lt;property value="true" name="reasonable"/&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/configuration&gt;]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>ssm</tag>
        <tag>springmvc</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自己日常用LINUX命令]]></title>
    <url>%2F2019%2F02%2F28%2F%E6%97%A5%E5%B8%B8%E7%94%A8LINUX%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[查看tomcat进程：ps -ef | grep tomcat 整行删除：CTRL K，光标往后删除；CTRL U，光标往前删 删除当前文件夹下所有文件：rm -f * 删除文件夹及内容：rm -fr * 实时查看文件内容尾：tail -f filename 查看服务器对外ip：curl ifconfig.me]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每次hexo d部署后都要在github仓库上重新保存域名]]></title>
    <url>%2F2019%2F02%2F27%2F%E6%AC%A1hexo-d%E9%83%A8%E7%BD%B2%E5%90%8E%E9%83%BD%E8%A6%81%E5%9C%A8github%E4%BB%93%E5%BA%93%E4%B8%8A%E9%87%8D%E6%96%B0%E4%BF%9D%E5%AD%98%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[解决办法： 在根目录的source文件夹下新建一个CNAME文件，我使用的是Notepad++，内容就写自己的域名，保存时选all type hexo g重新生成一下静态文件 hexo d部署上github]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-admin安装]]></title>
    <url>%2F2019%2F02%2F26%2Fhexo-admin%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装Hexo Admin 插件在hexo目录下输入如下命令： 12npm install --save hexo-adminhexo server -d 设置后台登录账号密码 浏览器访问 http://localhost:4000/admin ，并点击Settings 填好登录账号、密码和加密字符串，并将下方生成的内容粘贴到根目录_config.yml下 hexo中图片插入 设置config.yml的post_asset_folder为true，开启资源文件夹功能 通过相对路径标签引用资源，而不是markdown语法引用。{\% asset_img 1.png [title] \%}上面的“\”要去掉，这里因为是hexo的指令，不能直接显示在文章里，所以这里才加上。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>init</tag>
      </tags>
  </entry>
</search>
